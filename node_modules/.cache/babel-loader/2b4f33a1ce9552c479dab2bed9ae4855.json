{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport const useContainerDimensions = myRef => {\n  _s();\n\n  const getDimensions = () => {\n    let width = null;\n    let height = null;\n\n    if (myRef.current != null) {\n      width = myRef.current.offsetWidth;\n      height = myRef.current.offsetHeight;\n    }\n\n    console.log(myRef.current.offsetWidth);\n    return {\n      width: width,\n      height: height\n    };\n  };\n\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [myRef]);\n  return dimensions;\n}; // import React, { useRef, useLayoutEffect, useState } from 'react';\n//\n// const ComponentWithDimensions = (props) => {\n//     const targetRef = useRef();\n//     const [dimensions, setDimensions] = useState({});\n//\n//     // holds the timer for setTimeout and clearInterval\n//     let movement_timer = null;\n//\n//     // the number of ms the window size must stay the same size before the\n//     // dimension state variable is reset\n//     const RESET_TIMEOUT = 100;\n//\n//     const test_dimensions = () => {\n//         // For some reason targetRef.current.getBoundingClientRect was not available\n//         // I found this worked for me, but unfortunately I can't find the\n//         // documentation to explain this experience\n//         if (targetRef.current) {\n//             setDimensions({\n//                 width: targetRef.current.offsetWidth,\n//                 height: targetRef.current.offsetHeight\n//             });\n//         }\n//     }\n//\n//     // This sets the dimensions on the first render\n//     useLayoutEffect(() => {\n//         test_dimensions();\n//     }, []);\n//\n//     // every time the window is resized, the timer is cleared and set again\n//     // the net effect is the component will only reset after the window size\n//     // is at rest for the duration set in RESET_TIMEOUT.  This prevents rapid\n//     // redrawing of the component for more complex components such as charts\n//     window.addEventListener('resize', ()=>{\n//         clearInterval(movement_timer);\n//         movement_timer = setTimeout(test_dimensions, RESET_TIMEOUT);\n//     });\n//\n//     return (\n//         <div ref={ targetRef }>\n//             <p>{ dimensions.width }</p>\n//             <p>{ dimensions.height }</p>\n//         </div>\n//     );\n// }\n//\n// export default ComponentWithDimensions;\n\n_s(useContainerDimensions, \"WaeEaKYdRtO3c/yuLCczg9/6suY=\");","map":{"version":3,"sources":["C:/projects/React/mywebsite/src/components/helpers/hooks/useContainerDimensions.js"],"names":["useEffect","useState","useContainerDimensions","myRef","getDimensions","width","height","current","offsetWidth","offsetHeight","console","log","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,sBAAsB,GAAGC,KAAK,IAAI;AAAA;;AAE3C,QAAMC,aAAa,GAAG,MAAM;AACxB,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,MAAM,GAAG,IAAb;;AACA,QAAIH,KAAK,CAACI,OAAN,IAAiB,IAArB,EAA2B;AACvBF,MAAAA,KAAK,GAAGF,KAAK,CAACI,OAAN,CAAcC,WAAtB;AACAF,MAAAA,MAAM,GAAGH,KAAK,CAACI,OAAN,CAAcE,YAAvB;AACH;;AACDC,IAAAA,OAAO,CAACC,GAAR,CAAYR,KAAK,CAACI,OAAN,CAAcC,WAA1B;AACA,WAAO;AACHH,MAAAA,KAAK,EAAEA,KADJ;AAEHC,MAAAA,MAAM,EAAEA;AAFL,KAAP;AAIH,GAZD;;AAcA,QAAM,CAACM,UAAD,EAAaC,aAAb,IAA8BZ,QAAQ,CAAC;AAACI,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,MAAM,EAAE;AAAnB,GAAD,CAA5C;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMc,YAAY,GAAG,MAAM;AACvBD,MAAAA,aAAa,CAACT,aAAa,EAAd,CAAb;AACH,KAFD;;AAIA,QAAID,KAAK,CAACI,OAAV,EAAmB;AACfM,MAAAA,aAAa,CAACT,aAAa,EAAd,CAAb;AACH;;AAEDW,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACH,KAFD;AAGH,GAdQ,EAcN,CAACX,KAAD,CAdM,CAAT;AAgBA,SAAOS,UAAP;AAEH,CApCM,C,CAqCP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;GApFaV,sB","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nexport const useContainerDimensions = myRef => {\r\n\r\n    const getDimensions = () => {\r\n        let width = null;\r\n        let height = null;\r\n        if (myRef.current != null) {\r\n            width = myRef.current.offsetWidth;\r\n            height = myRef.current.offsetHeight;\r\n        }\r\n        console.log(myRef.current.offsetWidth);\r\n        return {\r\n            width: width,\r\n            height: height\r\n        }\r\n    }\r\n\r\n    const [dimensions, setDimensions] = useState({width: 0, height: 0})\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setDimensions(getDimensions())\r\n        }\r\n\r\n        if (myRef.current) {\r\n            setDimensions(getDimensions())\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize)\r\n        }\r\n    }, [myRef])\r\n\r\n    return dimensions;\r\n\r\n};\r\n// import React, { useRef, useLayoutEffect, useState } from 'react';\r\n//\r\n// const ComponentWithDimensions = (props) => {\r\n//     const targetRef = useRef();\r\n//     const [dimensions, setDimensions] = useState({});\r\n//\r\n//     // holds the timer for setTimeout and clearInterval\r\n//     let movement_timer = null;\r\n//\r\n//     // the number of ms the window size must stay the same size before the\r\n//     // dimension state variable is reset\r\n//     const RESET_TIMEOUT = 100;\r\n//\r\n//     const test_dimensions = () => {\r\n//         // For some reason targetRef.current.getBoundingClientRect was not available\r\n//         // I found this worked for me, but unfortunately I can't find the\r\n//         // documentation to explain this experience\r\n//         if (targetRef.current) {\r\n//             setDimensions({\r\n//                 width: targetRef.current.offsetWidth,\r\n//                 height: targetRef.current.offsetHeight\r\n//             });\r\n//         }\r\n//     }\r\n//\r\n//     // This sets the dimensions on the first render\r\n//     useLayoutEffect(() => {\r\n//         test_dimensions();\r\n//     }, []);\r\n//\r\n//     // every time the window is resized, the timer is cleared and set again\r\n//     // the net effect is the component will only reset after the window size\r\n//     // is at rest for the duration set in RESET_TIMEOUT.  This prevents rapid\r\n//     // redrawing of the component for more complex components such as charts\r\n//     window.addEventListener('resize', ()=>{\r\n//         clearInterval(movement_timer);\r\n//         movement_timer = setTimeout(test_dimensions, RESET_TIMEOUT);\r\n//     });\r\n//\r\n//     return (\r\n//         <div ref={ targetRef }>\r\n//             <p>{ dimensions.width }</p>\r\n//             <p>{ dimensions.height }</p>\r\n//         </div>\r\n//     );\r\n// }\r\n//\r\n// export default ComponentWithDimensions;"]},"metadata":{},"sourceType":"module"}