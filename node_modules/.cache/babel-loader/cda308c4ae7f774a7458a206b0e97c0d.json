{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState } from \"react\";\nexport const useContainerDimensions = myRef => {\n  _s();\n\n  const getDimensions = () => {\n    let width = null;\n    let height = null;\n\n    if (myRef.current != null) {\n      width = myRef.current.offsetWidth;\n      height = myRef.current.offsetHeight;\n    }\n\n    return {\n      width: width,\n      height: height\n    };\n  };\n\n  const [dimensions, setDimensions] = useState({\n    width: 0,\n    height: 0\n  });\n  useEffect(() => {\n    const handleResize = () => {\n      setDimensions(getDimensions());\n    };\n\n    if (myRef.current) {\n      setDimensions(getDimensions());\n    }\n\n    window.addEventListener(\"resize\", handleResize);\n    return () => {\n      window.removeEventListener(\"resize\", handleResize);\n    };\n  }, [myRef]);\n  return dimensions;\n};\n\n_s(useContainerDimensions, \"WaeEaKYdRtO3c/yuLCczg9/6suY=\");","map":{"version":3,"sources":["C:/projects/React/mywebsite/src/components/helpers/hooks/useContainerDimensions.js"],"names":["useEffect","useState","useContainerDimensions","myRef","getDimensions","width","height","current","offsetWidth","offsetHeight","dimensions","setDimensions","handleResize","window","addEventListener","removeEventListener"],"mappings":";;AAAA,SAAQA,SAAR,EAAmBC,QAAnB,QAAkC,OAAlC;AAEA,OAAO,MAAMC,sBAAsB,GAAGC,KAAK,IAAI;AAAA;;AAC3C,QAAMC,aAAa,GAAG,MAAM;AACxB,QAAIC,KAAK,GAAG,IAAZ;AACA,QAAIC,MAAM,GAAG,IAAb;;AACA,QAAIH,KAAK,CAACI,OAAN,IAAiB,IAArB,EAA2B;AACvBF,MAAAA,KAAK,GAAGF,KAAK,CAACI,OAAN,CAAcC,WAAtB;AACAF,MAAAA,MAAM,GAAGH,KAAK,CAACI,OAAN,CAAcE,YAAvB;AACH;;AACD,WAAO;AACHJ,MAAAA,KAAK,EAAEA,KADJ;AAEHC,MAAAA,MAAM,EAAEA;AAFL,KAAP;AAIH,GAXD;;AAaA,QAAM,CAACI,UAAD,EAAaC,aAAb,IAA8BV,QAAQ,CAAC;AAACI,IAAAA,KAAK,EAAE,CAAR;AAAWC,IAAAA,MAAM,EAAE;AAAnB,GAAD,CAA5C;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACZ,UAAMY,YAAY,GAAG,MAAM;AACvBD,MAAAA,aAAa,CAACP,aAAa,EAAd,CAAb;AACH,KAFD;;AAIA,QAAID,KAAK,CAACI,OAAV,EAAmB;AACfI,MAAAA,aAAa,CAACP,aAAa,EAAd,CAAb;AACH;;AAEDS,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCF,YAAlC;AAEA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACE,mBAAP,CAA2B,QAA3B,EAAqCH,YAArC;AACH,KAFD;AAGH,GAdQ,EAcN,CAACT,KAAD,CAdM,CAAT;AAgBA,SAAOO,UAAP;AAEH,CAlCM;;GAAMR,sB","sourcesContent":["import {useEffect, useState} from \"react\";\r\n\r\nexport const useContainerDimensions = myRef => {\r\n    const getDimensions = () => {\r\n        let width = null;\r\n        let height = null;\r\n        if (myRef.current != null) {\r\n            width = myRef.current.offsetWidth;\r\n            height = myRef.current.offsetHeight;\r\n        }\r\n        return {\r\n            width: width,\r\n            height: height\r\n        }\r\n    }\r\n\r\n    const [dimensions, setDimensions] = useState({width: 0, height: 0})\r\n\r\n    useEffect(() => {\r\n        const handleResize = () => {\r\n            setDimensions(getDimensions())\r\n        }\r\n\r\n        if (myRef.current) {\r\n            setDimensions(getDimensions())\r\n        }\r\n\r\n        window.addEventListener(\"resize\", handleResize)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", handleResize)\r\n        }\r\n    }, [myRef])\r\n\r\n    return dimensions;\r\n\r\n};\r\n"]},"metadata":{},"sourceType":"module"}