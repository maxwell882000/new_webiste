{"ast":null,"code":"class Paginate {\n  constructor(length, pages) {\n    const [currentPage, setCurrentPage] = pages;\n    this.previousPage = currentPage;\n    this.currentPage = currentPage;\n    this.setCurrentPage = setCurrentPage;\n    this.lastPage = length - 1;\n  }\n\n  goToNextPage(selectedPage = 1) {\n    this.previousPage = this.currentPage;\n    const page = this.checkCurrentNotLastThenIncrement(selectedPage);\n    this.setCurrentPage(page);\n  }\n\n  goToPreviousPage(selectedPage = 1) {\n    this.previousPage = this.currentPage;\n    const page = this.checkCurrentNotFirstThenDecrement(selectedPage);\n    this.setCurrentPage(page);\n  }\n\n  goPageDecide(selected) {\n    console.log(selected);\n\n    if (selected > this.currentPage) {\n      this.goToNextPage(selected);\n    } else if (selected < this.currentPage) {\n      this.goToPreviousPage(selected);\n    }\n  }\n\n  isSelected(index) {\n    return index === this.currentPage || this.currentPage >= 3 && index === 3 && this.lastPage !== this.currentPage || this.currentPage === this.lastPage && index === 4;\n  }\n\n  checkCurrentNotFirstThenDecrement(index) {\n    return 0 > this.currentPage - index ? 0 : this.currentPage - index;\n  }\n\n  checkCurrentNotLastThenIncrement(index) {\n    return this.lastPage < this.currentPage + index ? this.currentPage : this.currentPage + index;\n  }\n\n  checkPage(relative, index) {}\n\n}\n\nexport default Paginate;","map":{"version":3,"sources":["C:/projects/React/mywebsite/src/components/helpers/scroll/Paginate.js"],"names":["Paginate","constructor","length","pages","currentPage","setCurrentPage","previousPage","lastPage","goToNextPage","selectedPage","page","checkCurrentNotLastThenIncrement","goToPreviousPage","checkCurrentNotFirstThenDecrement","goPageDecide","selected","console","log","isSelected","index","checkPage","relative"],"mappings":"AAAA,MAAMA,QAAN,CAAe;AAEXC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;AACvB,UAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCF,KAAtC;AACA,SAAKG,YAAL,GAAoBF,WAApB;AACA,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKE,QAAL,GAAgBL,MAAM,GAAG,CAAzB;AACH;;AAEDM,EAAAA,YAAY,CAACC,YAAY,GAAG,CAAhB,EAAmB;AAC3B,SAAKH,YAAL,GAAoB,KAAKF,WAAzB;AACA,UAAMM,IAAI,GAAG,KAAKC,gCAAL,CAAsCF,YAAtC,CAAb;AACA,SAAKJ,cAAL,CAAoBK,IAApB;AACH;;AAEDE,EAAAA,gBAAgB,CAACH,YAAY,GAAG,CAAhB,EAAmB;AAC/B,SAAKH,YAAL,GAAoB,KAAKF,WAAzB;AACA,UAAMM,IAAI,GAAG,KAAKG,iCAAL,CAAuCJ,YAAvC,CAAb;AACA,SAAKJ,cAAL,CAAoBK,IAApB;AACH;;AAEDI,EAAAA,YAAY,CAACC,QAAD,EAAW;AACnBC,IAAAA,OAAO,CAACC,GAAR,CAAYF,QAAZ;;AACA,QAAIA,QAAQ,GAAG,KAAKX,WAApB,EAAiC;AAC7B,WAAKI,YAAL,CAAkBO,QAAlB;AACH,KAFD,MAEO,IAAIA,QAAQ,GAAG,KAAKX,WAApB,EAAiC;AACpC,WAAKQ,gBAAL,CAAsBG,QAAtB;AACH;AACJ;;AAEDG,EAAAA,UAAU,CAACC,KAAD,EAAQ;AACd,WAAQA,KAAK,KAAK,KAAKf,WAAhB,IACC,KAAKA,WAAL,IAAoB,CAApB,IAAyBe,KAAK,KAAK,CAAnC,IAAwC,KAAKZ,QAAL,KAAkB,KAAKH,WADhE,IAEC,KAAKA,WAAL,KAAqB,KAAKG,QAA1B,IAAsCY,KAAK,KAAK,CAFxD;AAGH;;AAEDN,EAAAA,iCAAiC,CAACM,KAAD,EAAQ;AACrC,WAAO,IAAI,KAAKf,WAAL,GAAmBe,KAAvB,GAA+B,CAA/B,GAAmC,KAAKf,WAAL,GAAmBe,KAA7D;AACH;;AAEDR,EAAAA,gCAAgC,CAACQ,KAAD,EAAQ;AACpC,WAAO,KAAKZ,QAAL,GAAgB,KAAKH,WAAL,GAAmBe,KAAnC,GAA2C,KAAKf,WAAhD,GAA8D,KAAKA,WAAL,GAAmBe,KAAxF;AACH;;AAEDC,EAAAA,SAAS,CAACC,QAAD,EAAWF,KAAX,EAAkB,CAE1B;;AA/CU;;AAkDf,eAAenB,QAAf","sourcesContent":["class Paginate {\r\n\r\n    constructor(length, pages) {\r\n        const [currentPage, setCurrentPage] = pages;\r\n        this.previousPage = currentPage;\r\n        this.currentPage = currentPage;\r\n        this.setCurrentPage = setCurrentPage;\r\n        this.lastPage = length - 1;\r\n    }\r\n\r\n    goToNextPage(selectedPage = 1) {\r\n        this.previousPage = this.currentPage;\r\n        const page = this.checkCurrentNotLastThenIncrement(selectedPage);\r\n        this.setCurrentPage(page);\r\n    }\r\n\r\n    goToPreviousPage(selectedPage = 1) {\r\n        this.previousPage = this.currentPage;\r\n        const page = this.checkCurrentNotFirstThenDecrement(selectedPage)\r\n        this.setCurrentPage(page)\r\n    }\r\n\r\n    goPageDecide(selected) {\r\n        console.log(selected);\r\n        if (selected > this.currentPage) {\r\n            this.goToNextPage(selected);\r\n        } else if (selected < this.currentPage) {\r\n            this.goToPreviousPage(selected);\r\n        }\r\n    }\r\n\r\n    isSelected(index) {\r\n        return (index === this.currentPage)\r\n            || (this.currentPage >= 3 && index === 3 && this.lastPage !== this.currentPage)\r\n            || (this.currentPage === this.lastPage && index === 4);\r\n    }\r\n\r\n    checkCurrentNotFirstThenDecrement(index) {\r\n        return 0 > this.currentPage - index ? 0 : this.currentPage - index;\r\n    }\r\n\r\n    checkCurrentNotLastThenIncrement(index) {\r\n        return this.lastPage < this.currentPage + index ? this.currentPage : this.currentPage + index;\r\n    }\r\n\r\n    checkPage(relative, index) {\r\n\r\n    }\r\n}\r\n\r\nexport default Paginate;"]},"metadata":{},"sourceType":"module"}