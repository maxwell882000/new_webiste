{"ast":null,"code":"var _jsxFileName = \"C:\\\\projects\\\\React\\\\mywebsite\\\\src\\\\components\\\\helpers\\\\ListServices.js\";\nimport React from 'react';\nimport TextHover from \"./text/TextHover\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction ListServices({\n  paginate\n}) {\n  function textEmphasize(choice, text, onClick) {\n    if (choice) {\n      return /*#__PURE__*/_jsxDEV(TextHover, {\n        onClick: onClick,\n        text: text,\n        color: \"#D24A6A\",\n        fontWeight: 700,\n        size: \"2rem\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 20\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(TextHover, {\n      onClick: onClick,\n      text: text,\n      color: \"#121212\",\n      fontWeight: 400,\n      size: \"1.4rem\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 16\n    }, this);\n  }\n\n  const text = [{\n    title: \"Cайты\"\n  }, {\n    title: \"Боты\"\n  }, {\n    title: \"Приложения\"\n  }];\n  const components = text.map((title, i) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginLeft: \"3%\"\n      },\n      children: textEmphasize(paginate.isSelected(i), title.title, () => paginate.goPageDecide(i))\n    }, i, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  });\n\n  for (let i = 0; i < text.length; i++) {\n    components.push();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"row\",\n    style: {\n      flex: 0.4,\n      alignItems: \"flex-end\"\n    },\n    children: components\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_c = ListServices;\nexport default ListServices;\n\nvar _c;\n\n$RefreshReg$(_c, \"ListServices\");","map":{"version":3,"sources":["C:/projects/React/mywebsite/src/components/helpers/ListServices.js"],"names":["React","TextHover","ListServices","paginate","textEmphasize","choice","text","onClick","title","components","map","i","marginLeft","isSelected","goPageDecide","length","push","flex","alignItems"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;;AAEA,SAASC,YAAT,CAAsB;AAACC,EAAAA;AAAD,CAAtB,EAAkC;AAC9B,WAASC,aAAT,CAAuBC,MAAvB,EAA+BC,IAA/B,EAAqCC,OAArC,EAA8C;AAC1C,QAAIF,MAAJ,EAAY;AACR,0BAAO,QAAC,SAAD;AAAW,QAAA,OAAO,EAAEE,OAApB;AAA6B,QAAA,IAAI,EAAED,IAAnC;AAAyC,QAAA,KAAK,EAAC,SAA/C;AAAyD,QAAA,UAAU,EAAE,GAArE;AAA0E,QAAA,IAAI,EAAC;AAA/E;AAAA;AAAA;AAAA;AAAA,cAAP;AACH;;AACD,wBAAO,QAAC,SAAD;AAAW,MAAA,OAAO,EAAEC,OAApB;AAA6B,MAAA,IAAI,EAAED,IAAnC;AAAyC,MAAA,KAAK,EAAC,SAA/C;AAAyD,MAAA,UAAU,EAAE,GAArE;AAA0E,MAAA,IAAI,EAAC;AAA/E;AAAA;AAAA;AAAA;AAAA,YAAP;AACH;;AAED,QAAMA,IAAI,GAAG,CACT;AACIE,IAAAA,KAAK,EAAE;AADX,GADS,EAIT;AACIA,IAAAA,KAAK,EAAE;AADX,GAJS,EAOT;AACIA,IAAAA,KAAK,EAAE;AADX,GAPS,CAAb;AAWA,QAAMC,UAAU,GAAGH,IAAI,CAACI,GAAL,CAAS,CAACF,KAAD,EAAQG,CAAR,KAAc;AACtC,wBACI;AAAa,MAAA,KAAK,EAAE;AAChBC,QAAAA,UAAU,EAAE;AADI,OAApB;AAAA,gBAGKR,aAAa,CAACD,QAAQ,CAACU,UAAT,CAAoBF,CAApB,CAAD,EAAyBH,KAAK,CAACA,KAA/B,EAAsC,MAAML,QAAQ,CAACW,YAAT,CAAsBH,CAAtB,CAA5C;AAHlB,OAAUA,CAAV;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH,GARkB,CAAnB;;AASA,OAAK,IAAIA,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGL,IAAI,CAACS,MAAzB,EAAiCJ,CAAC,EAAlC,EAAsC;AAClCF,IAAAA,UAAU,CAACO,IAAX;AAGH;;AACD,sBACI;AAAK,IAAA,SAAS,EAAC,KAAf;AAAqB,IAAA,KAAK,EAAE;AACxBC,MAAAA,IAAI,EAAE,GADkB;AAExBC,MAAAA,UAAU,EAAE;AAFY,KAA5B;AAAA,cAIKT;AAJL;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;KAzCQP,Y;AA2CT,eAAeA,YAAf","sourcesContent":["import React from 'react';\r\nimport TextHover from \"./text/TextHover\";\r\n\r\nfunction ListServices({paginate}) {\r\n    function textEmphasize(choice, text, onClick) {\r\n        if (choice) {\r\n            return <TextHover onClick={onClick} text={text} color=\"#D24A6A\" fontWeight={700} size=\"2rem\"/>\r\n        }\r\n        return <TextHover onClick={onClick} text={text} color=\"#121212\" fontWeight={400} size=\"1.4rem\"/>\r\n    }\r\n\r\n    const text = [\r\n        {\r\n            title: \"Cайты\"\r\n        },\r\n        {\r\n            title: \"Боты\"\r\n        },\r\n        {\r\n            title: \"Приложения\"\r\n        },\r\n    ]\r\n    const components = text.map((title, i) => {\r\n        return (\r\n            <div key={i} style={{\r\n                marginLeft: \"3%\"\r\n            }}>\r\n                {textEmphasize(paginate.isSelected(i), title.title, () => paginate.goPageDecide(i))}\r\n\r\n            </div>)\r\n    });\r\n    for (let i = 0; i < text.length; i++) {\r\n        components.push(\r\n\r\n        )\r\n    }\r\n    return (\r\n        <div className=\"row\" style={{\r\n            flex: 0.4,\r\n            alignItems: \"flex-end\"\r\n        }}>\r\n            {components}\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ListServices;"]},"metadata":{},"sourceType":"module"}