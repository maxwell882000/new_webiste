{"ast":null,"code":"class Paginate {\n  constructor(length, pages) {\n    const [currentPage, setCurrentPage] = pages;\n    this.previousPage = currentPage;\n    this.currentPage = currentPage;\n    this.setCurrentPage = setCurrentPage;\n    this.lastPage = length;\n  }\n\n  goToNextPage() {\n    this.previousPage = this.currentPage;\n    this.setCurrentPage(this.checkCurrentNotLastThenIncrement(1));\n  }\n\n  goToPreviousPage() {\n    this.previousPage = this.currentPage;\n    this.setCurrentPage(this.checkCurrentNotLastThenIncrement(1));\n  }\n\n  goPageDecideByOne(selected) {\n    if (selected > this.currentPage) {\n      this.goToNextPage();\n    } else if (selected < this.currentPage) {\n      this.goToPreviousPage();\n    }\n  }\n\n  checkCurrentNotFirstThenDecrement(index) {\n    return 0 > this.currentPage - index ? 0 : this.currentPage - index;\n  }\n\n  checkCurrentNotLastThenIncrement(index) {\n    return this.lastPage <= this.currentPage + index ? this.currentPage : this.currentPage + index;\n  }\n\n  checkPage(relative, index) {}\n\n}\n\nexport default Paginate;","map":{"version":3,"sources":["C:/projects/React/mywebsite/src/components/helpers/scroll/Paginate.js"],"names":["Paginate","constructor","length","pages","currentPage","setCurrentPage","previousPage","lastPage","goToNextPage","checkCurrentNotLastThenIncrement","goToPreviousPage","goPageDecideByOne","selected","checkCurrentNotFirstThenDecrement","index","checkPage","relative"],"mappings":"AAAA,MAAMA,QAAN,CAAe;AAEXC,EAAAA,WAAW,CAACC,MAAD,EAASC,KAAT,EAAgB;AACvB,UAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCF,KAAtC;AACA,SAAKG,YAAL,GAAoBF,WAApB;AACA,SAAKA,WAAL,GAAmBA,WAAnB;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACA,SAAKE,QAAL,GAAgBL,MAAhB;AACH;;AAEDM,EAAAA,YAAY,GAAG;AACX,SAAKF,YAAL,GAAoB,KAAKF,WAAzB;AACA,SAAKC,cAAL,CAAoB,KAAKI,gCAAL,CAAsC,CAAtC,CAApB;AACH;;AAEDC,EAAAA,gBAAgB,GAAG;AACf,SAAKJ,YAAL,GAAoB,KAAKF,WAAzB;AACA,SAAKC,cAAL,CAAoB,KAAKI,gCAAL,CAAsC,CAAtC,CAApB;AACH;;AAEDE,EAAAA,iBAAiB,CAACC,QAAD,EAAW;AACxB,QAAIA,QAAQ,GAAG,KAAKR,WAApB,EAAiC;AAC7B,WAAKI,YAAL;AACH,KAFD,MAEO,IAAII,QAAQ,GAAG,KAAKR,WAApB,EAAiC;AACpC,WAAKM,gBAAL;AACH;AACJ;;AAEDG,EAAAA,iCAAiC,CAACC,KAAD,EAAQ;AACrC,WAAO,IAAI,KAAKV,WAAL,GAAmBU,KAAvB,GAA+B,CAA/B,GAAmC,KAAKV,WAAL,GAAmBU,KAA7D;AACH;;AAEDL,EAAAA,gCAAgC,CAACK,KAAD,EAAQ;AACpC,WAAO,KAAKP,QAAL,IAAiB,KAAKH,WAAL,GAAmBU,KAApC,GAA4C,KAAKV,WAAjD,GAA+D,KAAKA,WAAL,GAAmBU,KAAzF;AACH;;AAEDC,EAAAA,SAAS,CAACC,QAAD,EAAWF,KAAX,EAAkB,CAE1B;;AAtCU;;AAyCf,eAAed,QAAf","sourcesContent":["class Paginate {\r\n\r\n    constructor(length, pages) {\r\n        const [currentPage, setCurrentPage] = pages;\r\n        this.previousPage = currentPage;\r\n        this.currentPage = currentPage;\r\n        this.setCurrentPage = setCurrentPage;\r\n        this.lastPage = length;\r\n    }\r\n\r\n    goToNextPage() {\r\n        this.previousPage = this.currentPage;\r\n        this.setCurrentPage(this.checkCurrentNotLastThenIncrement(1));\r\n    }\r\n\r\n    goToPreviousPage() {\r\n        this.previousPage = this.currentPage;\r\n        this.setCurrentPage(this.checkCurrentNotLastThenIncrement(1))\r\n    }\r\n\r\n    goPageDecideByOne(selected) {\r\n        if (selected > this.currentPage) {\r\n            this.goToNextPage();\r\n        } else if (selected < this.currentPage) {\r\n            this.goToPreviousPage();\r\n        }\r\n    }\r\n\r\n    checkCurrentNotFirstThenDecrement(index) {\r\n        return 0 > this.currentPage - index ? 0 : this.currentPage - index;\r\n    }\r\n\r\n    checkCurrentNotLastThenIncrement(index) {\r\n        return this.lastPage <= this.currentPage + index ? this.currentPage : this.currentPage + index;\r\n    }\r\n\r\n    checkPage(relative, index) {\r\n\r\n    }\r\n}\r\n\r\nexport default Paginate;"]},"metadata":{},"sourceType":"module"}